#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
C√¥ng c·ª• debug ph√°t hi·ªán khu√¥n m·∫∑t
Debug tool for face detection issues
"""

import os
import cv2
import numpy as np
from datetime import datetime

def debug_face_detection(image_path):
    """Debug chi ti·∫øt qu√° tr√¨nh ph√°t hi·ªán khu√¥n m·∫∑t"""
    print(f"\nüîç [DEBUG] B·∫Øt ƒë·∫ßu debug ph√°t hi·ªán khu√¥n m·∫∑t: {image_path}")
    
    if not os.path.exists(image_path):
        print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {image_path}")
        return
    
    # Load ·∫£nh
    image = cv2.imread(image_path)
    if image is None:
        print("‚ùå Kh√¥ng th·ªÉ load ·∫£nh")
        return
    
    print(f"üìä Th√¥ng tin ·∫£nh:")
    print(f"  - K√≠ch th∆∞·ªõc: {image.shape}")
    print(f"  - Lo·∫°i: {image.dtype}")
    print(f"  - K√™nh m√†u: {image.shape[2] if len(image.shape) > 2 else 1}")
    
    # Chuy·ªÉn sang grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    print(f"  - Grayscale shape: {gray.shape}")
    
    # Ki·ªÉm tra ƒë·ªô s√°ng trung b√¨nh
    brightness = np.mean(gray)
    contrast = np.std(gray)
    print(f"  - ƒê·ªô s√°ng trung b√¨nh: {brightness:.2f}/255")
    print(f"  - ƒê·ªô t∆∞∆°ng ph·∫£n: {contrast:.2f}")
    
    # Test v·ªõi c√°c tham s·ªë kh√°c nhau
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    
    if face_cascade.empty():
        print("‚ùå Kh√¥ng th·ªÉ load Haar Cascade classifier")
        return
    
    print(f"\nüß™ [TEST] Th·ª≠ c√°c tham s·ªë ph√°t hi·ªán khu√¥n m·∫∑t kh√°c nhau:")
    
    # Test 1: Tham s·ªë m·∫∑c ƒë·ªãnh (nghi√™m ng·∫∑t)
    faces1 = face_cascade.detectMultiScale(
        gray,
        scaleFactor=1.1,
        minNeighbors=6,
        minSize=(50, 50),
        maxSize=(300, 300),
        flags=cv2.CASCADE_SCALE_IMAGE
    )
    print(f"  - Tham s·ªë nghi√™m ng·∫∑t: {len(faces1)} khu√¥n m·∫∑t")
    
    # Test 2: Tham s·ªë trung b√¨nh
    faces2 = face_cascade.detectMultiScale(
        gray,
        scaleFactor=1.05,
        minNeighbors=4,
        minSize=(30, 30),
        maxSize=(400, 400),
        flags=cv2.CASCADE_SCALE_IMAGE
    )
    print(f"  - Tham s·ªë trung b√¨nh: {len(faces2)} khu√¥n m·∫∑t")
    
    # Test 3: Tham s·ªë l·ªèng l·∫ªo
    faces3 = face_cascade.detectMultiScale(
        gray,
        scaleFactor=1.03,
        minNeighbors=2,
        minSize=(20, 20),
        maxSize=(500, 500),
        flags=cv2.CASCADE_SCALE_IMAGE
    )
    print(f"  - Tham s·ªë l·ªèng l·∫ªo: {len(faces3)} khu√¥n m·∫∑t")
    
    # Test 4: Tham s·ªë r·∫•t l·ªèng l·∫ªo
    faces4 = face_cascade.detectMultiScale(
        gray,
        scaleFactor=1.01,
        minNeighbors=1,
        minSize=(10, 10),
        maxSize=(1000, 1000),
        flags=cv2.CASCADE_SCALE_IMAGE
    )
    print(f"  - Tham s·ªë r·∫•t l·ªèng l·∫ªo: {len(faces4)} khu√¥n m·∫∑t")
    
    # Ch·ªçn k·∫øt qu·∫£ t·ªët nh·∫•t
    best_faces = faces4 if len(faces4) > 0 else faces3 if len(faces3) > 0 else faces2 if len(faces2) > 0 else faces1
    print(f"\n‚úÖ K·∫øt qu·∫£ t·ªët nh·∫•t: {len(best_faces)} khu√¥n m·∫∑t")
    
    if len(best_faces) > 0:
        print(f"\nüìã Chi ti·∫øt c√°c khu√¥n m·∫∑t ph√°t hi·ªán ƒë∆∞·ª£c:")
        for i, (x, y, w, h) in enumerate(best_faces):
            print(f"  - Khu√¥n m·∫∑t {i+1}: v·ªã tr√≠=({x}, {y}), k√≠ch th∆∞·ªõc=({w}, {h})")
            
            # Ki·ªÉm tra ch·∫•t l∆∞·ª£ng khu√¥n m·∫∑t
            face_roi = gray[y:y+h, x:x+w]
            if face_roi.size > 0:
                face_brightness = np.mean(face_roi)
                face_contrast = np.std(face_roi)
                aspect_ratio = w / h
                
                print(f"    + ƒê·ªô s√°ng: {face_brightness:.2f}/255")
                print(f"    + ƒê·ªô t∆∞∆°ng ph·∫£n: {face_contrast:.2f}")
                print(f"    + T·ª∑ l·ªá khung h√¨nh: {aspect_ratio:.2f}")
                
                # ƒê√°nh gi√° ch·∫•t l∆∞·ª£ng
                quality_score = 0
                if 30 <= face_brightness <= 200:
                    quality_score += 1
                if face_contrast >= 20:
                    quality_score += 1
                if 0.7 <= aspect_ratio <= 1.3:
                    quality_score += 1
                
                print(f"    + ƒêi·ªÉm ch·∫•t l∆∞·ª£ng: {quality_score}/3")
    else:
        print(f"\n‚ùå Kh√¥ng ph√°t hi·ªán ƒë∆∞·ª£c khu√¥n m·∫∑t n√†o!")
        print(f"\nüí° G·ª£i √Ω kh·∫Øc ph·ª•c:")
        print(f"  - Ki·ªÉm tra ·∫£nh c√≥ r√µ n√©t kh√¥ng")
        print(f"  - ƒê·∫£m b·∫£o khu√¥n m·∫∑t chi·∫øm √≠t nh·∫•t 10% di·ªán t√≠ch ·∫£nh")
        print(f"  - Th·ª≠ ·∫£nh c√≥ √°nh s√°ng t·ªët h∆°n")
        print(f"  - Ki·ªÉm tra khu√¥n m·∫∑t c√≥ b·ªã che khu·∫•t kh√¥ng")
        print(f"  - Th·ª≠ ·∫£nh c√≥ g√≥c nh√¨n th·∫≥ng m·∫∑t")

def test_with_different_images():
    """Test v·ªõi c√°c ·∫£nh trong th∆∞ m·ª•c uploads"""
    uploads_dir = "uploads"
    if not os.path.exists(uploads_dir):
        print(f"‚ùå Th∆∞ m·ª•c {uploads_dir} kh√¥ng t·ªìn t·∫°i")
        return
    
    image_files = [f for f in os.listdir(uploads_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png', '.gif'))]
    
    if not image_files:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o trong {uploads_dir}")
        return
    
    print(f"üìÅ T√¨m th·∫•y {len(image_files)} ·∫£nh trong {uploads_dir}")
    
    for image_file in image_files[:5]:  # Test t·ªëi ƒëa 5 ·∫£nh
        image_path = os.path.join(uploads_dir, image_file)
        print(f"\n{'='*60}")
        debug_face_detection(image_path)

if __name__ == "__main__":
    print("üîß C√îNG C·ª§ DEBUG PH√ÅT HI·ªÜN KHU√îN M·∫∂T")
    print("="*50)
    
    # Test v·ªõi ·∫£nh c·ª• th·ªÉ n·∫øu c√≥
    import sys
    if len(sys.argv) > 1:
        image_path = sys.argv[1]
        debug_face_detection(image_path)
    else:
        # Test v·ªõi t·∫•t c·∫£ ·∫£nh trong uploads
        test_with_different_images()
